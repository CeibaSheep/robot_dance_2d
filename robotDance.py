# -*- coding: utf-8 -*-
import numpy as np
import qi
import time
import math
import random

session = qi.Session()
session.connect("tcp://192.168.1.101:9559")

posture_service = session.service("ALRobotPosture")
posture_service.goToPosture("StandInit", 1.0)
time.sleep(1.5)

names = ['HeadPitch','HeadYaw','HipPitch','HipRoll','KneePitch','LElbowRoll',
        'LElbowYaw','LHand','LShoulderPitch','LShoulderRoll','LWristYaw',
        'RElbowRoll','RElbowYaw','RHand','RShoulderPitch','RShoulderRoll','RWristYaw']
keys = np.load('robotStatus.npy')
print(keys)
#keys = [[0,0,0,0,0, -85,0,90,45,30, 0,85,90,90,45, -30,0],
#        [0,-45,0,-20,0, -85,0,90,45,30, 0,85,90,90,45, -30,0],
#        [0,0,0,0,0, -85,0,90,45,30, 0,30,90,90,90, -30,0],
#        [0,0,0,0,0, -85,0,90,45,30, 0,85,45,90,90, -30,0],
#        [0,0,0,0,0, -85,0,90,45,30, 0,85,90,90,45, -30,0],
#        [0,0,0,20,0, -30,-90,90,45,30, 0,45,45,90,45, -30,0],
#        [0,0,0,0,0, -85,0,90,45,30, 0,85,45,90,90, -30,0],
#        [0,0,0,-20,0, -30,0,90,45,30, 0,85,90,90,45, -30,0],
#        [0,0,0,0,0, -85,-45,90,90,30, 0,30,45,90,45, -30,0],
#        [0,0,0,0,0, -85,-90,90,90,30, 0,30,45,90,90, -30,0],
#        [0,0,0,0,0, -30,-45,90,90,30, 0,30,45,90,90, -30,0],
#        [0,0,0,0,0, -30,-45,90,90,30, 0,85,45,90,45, -30,0],
#        [0,0,0,20,0, -30,-45,90,90,30, 0,30,0,90,45, -30,0],
#        [0,0,0,0,0,-30,0,90,0,30, 0,30,90,90,90, -30,0],
#        [0,0,0,0,0,-30,-90,90,90,30, 0,30,0,90,0, -30,0],
#        [0,0,0,0,0, -85,0,90,45,30, 0,85,90,90,90, -30,0],
#        [0,45,0,20,0, -30,-45,90,90,30, 0,85,45,90,90, -30,0],
#        [0,45,0,20,0, -30,-45,90,90,30, 0,85,90,90,30, -30,0],
#        [0,45,0,20,0, -85,-90,90,90,30, 0,30,90,90,90, -30,0],
#        [0,0,0,0,0, -85,-45,90,90,30, 0,85,90,90,90, -85,0],
#        [0,0,0,0,0, -30,0,90,90,30, 0,85,90,90,0, -30,0],
#        [0,0,0,0,0, -85,-90,90,0,30, 0,30,45,90,90, -30,0],
#        [0,-45,0,-20,0, -85,0,90,45,30, 0,0,45,90,0, -85,0],
#        [0,45,0,20,0, -30,-45,90,45,30, 0,30,45,90,90, -30,0],
#        [0,0,0,-20,0, -85,-90,90,45,30, 0,30,45,90,90, -30,0],
#        [0,0,0,-20,0, -30,0,90,0,30, 0,30,45,90,90, -30,0],
#        [0,0,0,-20,0, -85,0,90,0,30, 0,30,45,90,90, -30,0],
#        [0,0,0,0,0, -30,0,90,90,30, 0,30,45,90,90, -85,0],
#        [0,0,0,20,0, -30,0,90,90,30, 0,85,45,90,90, -30,0],
#        [0,0,0,0,0, -30,0,90,90,30, 0,30,45,90,90, -30,0],
#        [0,0,0,20,0, -30,-90,90,90,85, 0,30,0,90,0, -30,0],
#        [0,0,0,0,0, -30,0,90,45,30,0, 85,90,90,45,-30,0],
#        [0,0,0,0,0, -30,-90,90,90,30,0, 30,45,90,90,30,0],
#        [0,0,0,0,0, -30,-45,90,90,30,0, 30,45,90,90,-30,0],
#        [0,0,0,0,0, -30,0,90,0,30,0, 30,0,90,0,-30,0],
#        [0,0,0,0,0, -30,-45,90,90,30,0, 30,45,90,90,-30,0],
#        [0,0,0,0,0, -85,-45,90,0,85,0, 30,45,90,90,-30,0],
#        [0,0,0,0,0, -30,-45,90,90,30,0, 30,45,90,90,-30,0],
#        [0,0,0,0,0, -30,-45,90,90,30,0, 30,45,90,90,-85,0],
#        [0,0,0,0,0, -30,-45,90,90,85,0, 30,45,90,90,-30,0],
#        [0,0,0,0,0, -85,0,90,0,30,0, 85,45,90,45,-85,0],
#        [0,0,0,0,0, -30,0,90,0,30,0, 85,90,90,45,-30,0],
#        [0,0,0,0,0, -30,-45,90,90,30,0, 85,90,90,45,-30,0],
#        [0,0,0,20,0, -30,-90,90,90,0,0, 30,90,90,90,0,0],
#        [0,0,0,0,0, -30,-90,90,90,0,0, 30,90,90,90,0,0]]

times =[[1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1],
        [1,1,1,1,1, 1,1,1,1,1, 1,1,1,1,1, 1,1]]

for i in range(len(keys)):
    keys[i] = [item/180.0*math.pi for item in keys[i]]


name = "bgm/behavior_1"
play = session.service("ALBehaviorManager")
play.runBehavior(name,_async=True)

motion = session.service("ALMotion")
time.sleep(2)
for i in range(0,len(keys)):
    motion.angleInterpolation(names, keys[i], times[0], True,_async=True)
# motion.moveTo(0,0,-30/180.0*math.pi, 1,_async=True)


# motion.angleInterpolation("HipRoll",-20/182.0*math.pi, 1,True)

time.sleep(2)
posture_service.goToPosture("StandInit", 1.0)
play.stopBehavior(name)

print('done')

# robotStatus = np.load('robotStatus.npy')
# print(robotStatus.shape)